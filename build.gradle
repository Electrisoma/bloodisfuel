plugins {
    id 'idea'
    id 'maven-publish'
    id "net.neoforged.moddev.legacyforge" version "2.0.74"
}

base {
    archivesName = mod_id
    group = mod_group_id
    version = mod_version
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, " +
        "JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), " +
        "Arch: ${System.getProperty 'os.arch'}"

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

legacyForge {
    version = "$minecraft_version-$forge_version"

    validateAccessTransformers = false

    if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformers.from "src/main/resources/META-INF/accesstransformer.cfg"
    }

    parchment {
        minecraftVersion = minecraft_version
        mappingsVersion = parchment_version
    }

    mods {
        bloodisfuel {
            sourceSet sourceSets.main
        }
    }

    runs {
        // applies to all the run configs below
        configureEach {
            systemProperty 'forge.logging.markers', ''
            systemProperty 'forge.logging.console.level', 'info'
            jvmArguments = ["-XX:+IgnoreUnrecognizedVMOptions", "-XX:+AllowEnhancedClassRedefinition"]
            //jvmArgs("-XX:-OmitStackTraceInFastThrow") // uncomment when you get exceptions with null messages etc
            //jvmArgs '-XX:+UnlockCommercialFeatures' // uncomment for profiling

            systemProperty 'mixin.debug.export', 'true'
            systemProperty 'mixin.debug.verbose', 'true'

            //programArgument '-mixin.config=${mod_id}.mixins.json'
        }

        client {
            client()

            gameDirectory = project.file('run')
        }

        server {
            server()

            gameDirectory = project.file('run/server')
        }

        data {
            data()

            gameDirectory = project.file('run')
            systemProperty 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            systemProperty 'forge.logging.console.level', 'debug'
            programArguments.addAll("--mod", mod_id as String, "--all", "--output",
                    file("src/generated/resources/").getAbsolutePath(), "--existing",
                    file("src/main/resources").getAbsolutePath())
        }

        gameTestServer {
            type = "gameTestServer"

            gameDirectory = project.file('run/gametest')
        }
    }
}

repositories {
    maven {
        url = "https://maven.createmod.net"
    } // Create, Ponder, Flywheel
    maven {
        url = "https://maven.tterrag.com"
    } // Registrate

    maven {
        url = "https://maven.blamejared.com"
    } // JEI, Vazkii's Mods
    maven {
        url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
    } // ForgeConfigAPIPort

    maven {
        url = "https://www.cursemaven.com"
    }
    maven {
        url = "https://api.modrinth.com/maven"
    }

    mavenCentral()
    mavenLocal()
    flatDir {
        dirs "libs"
    }
}

dependencies {
    //Create, Flywheel, Registrate, Create Diesel Generators
    modImplementation("com.simibubi.create:create-${minecraft_version}:${create_version}:slim") { transitive = false }
    modImplementation("net.createmod.ponder:Ponder-Forge-${minecraft_version}:${ponder_version}")
    modCompileOnly("dev.engine-room.flywheel:flywheel-forge-api-${minecraft_version}:${flywheel_version}")
    modRuntimeOnly("dev.engine-room.flywheel:flywheel-forge-${minecraft_version}:${flywheel_version}")
    modImplementation("com.tterrag.registrate:Registrate:${registrate_version}")

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
    implementation("io.github.llamalad7:mixinextras-forge:0.4.1")

    //modImplementation("curse.maven:create-diesel-generators-869316:5401010")
    //modImplementation("curse.maven:createaddition-439890:5658602")

    //JEI
    modCompileOnly("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    modCompileOnly("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    modImplementation("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

    //Biomancy
    //implementation fg.deobf("curse.maven:bio-factory-1136762:5887553")
    //implementation fg.deobf("curse.maven:biomancy-492939:5886758")
    //implementation fg.deobf("curse.maven:geckolib-388172:6027567")

    //TConstruct, Mantle
    //implementation fg.deobf("curse.maven:mantle-74924:6041712")
    //implementation fg.deobf("curse.maven:tinkers-construct-74072:6041763")

    if (!Boolean.getBoolean('idea.sync.active')) {
        annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
    }
}

sourceSets.main {
    java{

    }

    resources {
        srcDir 'src/generated/resources'
        exclude ".cache"
    }
}

jar {
    from('LICENSE') {
        rename { "${it}_${archivesBaseName}" }
    }
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}